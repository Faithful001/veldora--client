import { LayoutGrid, List } from "lucide-react";
import { useDebounce } from "react-use";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Search } from "@/components/Search";
import { DashboardNav } from "@/components/DashboardNav";
import Head from "next/head";
import { BucketCard } from "@/components/BucketCard";
import CreateBucketDialog from "@/components/dialogs/CreateBucket.dialog";
import useUserBuckets from "@/hooks/useUserBuckets";
import React, { useState } from "react";
import withAuthHOC from "@/HOCs/withAuthHOC";
import { BucketCardSkeleton } from "@/components/BucketCardSkeleton";
import DashboardLayout from "@/layouts/Dashboard.layout";
import { BucketPage404 } from "@/components/errors/Error";

function Dashboard() {
  const [page, setPage] = useState(0);
  const [pageSize, setPageSize] = useState(10);
  const buckets = useUserBuckets({
    page,
    pageSize,
  });

  console.log({ buckets: buckets.data?.pages });

  const [searchQuery, setSearchQuery] = useState("");
  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState("");

  useDebounce(
    () => {
      setDebouncedSearchQuery(searchQuery);
    },
    500,
    [searchQuery],
  );

  return (
    <DashboardLayout>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex-1 p-8 pt-6 space-y-4">
        <div className="flex flex-col justify-between space-y-2 md:flex-row md:items-center">
          <h2 className="text-3xl font-bold tracking-tight">Dashboard</h2>
        </div>

        <Tabs defaultValue="grid-view" className="space-y-4">
          <div className="flex gap-2 flex-col md:flex-row">
            <Search
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="flex-1"
            />
            <div className="flex gap-2">
            <TabsList>
              <TabsTrigger value="grid-view">
                <LayoutGrid size={18} />
              </TabsTrigger>
              <TabsTrigger value="list-view">
                <List size={18} />
              </TabsTrigger>
              {/* <TabsTrigger value="reports" disabled>
                Reports
              </TabsTrigger>
              <TabsTrigger value="notifications" disabled>
                Notifications
              </TabsTrigger> */}
            </TabsList>
            <CreateBucketDialog />
            </div>
          </div>
              

          {
            buckets.isError ? (
              <div>
                <BucketPage404 type="GET_BUCKETS_FAILURE"/>
              </div>

            ) : (
              <>
              <TabsContent value="grid-view" className="space-y-4">
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {React.Children.toArray(
                buckets.isLoading &&
                  [0, 0, 0, 0, 0, 0].map(() => <BucketCardSkeleton />),
              )}
              {React.Children.toArray(
                !buckets.isLoading &&
                  buckets.data?.pages?.map((group) =>
                    group?.data
                      ?.filter((bucket) => {
                        return (
                          bucket.name
                            .toLowerCase()
                            .includes(debouncedSearchQuery.toLowerCase()) ||
                          bucket.description
                            .toLowerCase()
                            .includes(debouncedSearchQuery.toLowerCase())
                        );
                      })
                      .map((bucket) => <BucketCard bucket={bucket} />),
                  ),
              )}
            </div>
          </TabsContent>
          <TabsContent value="list-view" className="space-y-4">
            <div className="flex flex-col gap-4">
              {React.Children.toArray(
                !buckets.isLoading &&
                  buckets.data?.pages?.map((group) =>
                    group?.data
                      ?.filter((bucket) =>
                        bucket.name
                          .toLowerCase()
                          .includes(debouncedSearchQuery.toLowerCase()),
                      )
                      .map((bucket) => <BucketCard bucket={bucket} />),
                  ),
              )}
            </div>
          </TabsContent>
              </>
            )
          }
        </Tabs>
      </div>
    </DashboardLayout>
  );
}

export default Dashboard;
